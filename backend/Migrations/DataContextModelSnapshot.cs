// <auto-generated />
using System;
using EduConnect.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduConnect.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentActiveUser", b =>
                {
                    b.Property<Guid>("CollaborationDocumentActiveUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveUserPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StatusChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CollaborationDocumentActiveUserId");

                    b.HasIndex("ActiveUserPersonId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CollaborationDocumentActiveUser", "Document");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentInvitation", b =>
                {
                    b.Property<Guid>("CollaborationDocumentInvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvitedByPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvitedPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StatusChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CollaborationDocumentInvitationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentId1");

                    b.HasIndex("InvitedByPersonId");

                    b.HasIndex("InvitedPersonId");

                    b.ToTable("CollaborationDocumentInvitation", "Document");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentParticipant", b =>
                {
                    b.Property<Guid>("CollaborationDocumentParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollaborationDocumentInvitationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParticipantPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CollaborationDocumentParticipantId");

                    b.HasIndex("CollaborationDocumentInvitationId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ParticipantPersonId");

                    b.ToTable("CollaborationDocumentParticipant", "Document");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedByPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentId");

                    b.HasIndex("CreatedByPersonId");

                    b.ToTable("Document", "Document");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LearningDifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumberOfStudents")
                        .HasColumnType("int");

                    b.Property<int?>("MinNumberOfStudents")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublishedStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("LearningDifficultyLevelId");

                    b.HasIndex("TutorId");

                    b.ToTable("Course", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseCategory", b =>
                {
                    b.Property<Guid>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseCategoryId");

                    b.ToTable("CourseCategory", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseDetails", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("LearningDifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("LearningSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("LearningDifficultyLevelId");

                    b.HasIndex("LearningSubcategoryId");

                    b.ToTable("CourseDetails", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseEnrollment", b =>
                {
                    b.Property<Guid>("CourseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseEnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseEnrollment", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLanguage", b =>
                {
                    b.Property<Guid>("CourseLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseLanguageId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CourseLanguage", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLesson", b =>
                {
                    b.Property<Guid>("CourseLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LessonSequenceOrder")
                        .HasColumnType("int");

                    b.Property<int>("PublishedStatus")
                        .HasColumnType("int");

                    b.Property<string>("ShortSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StatusChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseLessonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("CourseLesson", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLessonContent", b =>
                {
                    b.Property<Guid>("CourseLessonContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseLessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseLessonContentId");

                    b.HasIndex("CourseLessonId")
                        .IsUnique();

                    b.HasIndex("RowGuid")
                        .IsUnique()
                        .HasDatabaseName("IX_CourseLessonContent_RowGuid");

                    b.ToTable("CourseLessonContent", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLessonResource", b =>
                {
                    b.Property<Guid>("CourseLessonResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseLessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseLessonResourceId");

                    b.HasIndex("CourseLessonId");

                    b.HasIndex("FolderId");

                    b.ToTable("CourseLessonResource", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CoursePromotionImage", b =>
                {
                    b.Property<Guid>("CoursePromotionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CoursePromotionImageId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FolderId");

                    b.ToTable("CoursePromotionImage", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseTag", b =>
                {
                    b.Property<Guid>("CourseTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseTagId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TagId");

                    b.HasIndex("TagId1");

                    b.ToTable("CourseTag", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseTeachingResource", b =>
                {
                    b.Property<Guid>("CourseTeachingResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseTeachingResourceId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FolderId");

                    b.ToTable("CourseTeachingResource", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseThumbnail", b =>
                {
                    b.Property<Guid>("CourseThumbnailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ThumbnailImageFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseThumbnailId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("FolderId");

                    b.ToTable("CourseThumbnail", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseViewershipData", b =>
                {
                    b.Property<Guid>("CourseViewershipDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseViewershipDataId");

                    b.Property<DateTime>("ClickedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ClickedOn");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CourseId");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("EnteredDetailsAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EnteredDetailsAt");

                    b.Property<DateTime?>("LeftDetailsAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LeftDetailsAt");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UserCameFrom")
                        .HasColumnType("int")
                        .HasColumnName("UserCameFrom");

                    b.Property<Guid>("ViewedByPersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ViewedByPersonId");

                    b.HasKey("CourseViewershipDataId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ViewedByPersonId");

                    b.ToTable("CourseViewershipData", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseViewershipDataSnapshot", b =>
                {
                    b.Property<Guid>("CourseViewershipDataSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageViewDurationInMinutes")
                        .HasColumnType("float");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentlyViewing")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUniqueVisitors")
                        .HasColumnType("int");

                    b.Property<int>("TotalViews")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseViewershipDataSnapshotId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseViewershipDataSnapshot", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("FolderId");

                    b.HasIndex("OwnerPersonId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folder", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.StudentEnrollment", b =>
                {
                    b.Property<Guid>("StudentEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentEnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEnrollment");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedByPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("TagId");

                    b.HasIndex("CreatedByPersonId");

                    b.ToTable("Tag", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Learning.LearningSubcategory", b =>
                {
                    b.Property<Guid>("LearningSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearningCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LearningSubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LearningSubcategoryId");

                    b.HasIndex("LearningCategoryId");

                    b.ToTable("LearningSubcategory", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Messenger.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.AuthenticationToken", b =>
                {
                    b.Property<Guid>("AuthenticationTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("AuthenticationTokenId");

                    b.HasIndex("PersonId");

                    b.ToTable("AuthenticationToken", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonId");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PersonPublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.HasKey("PersonId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Person", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.Property<Guid>("PersonDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryOfOriginCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonDetailsId");

                    b.HasIndex("CountryOfOriginCountryId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonDetails", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.Property<Guid>("PersonEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonEmailId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonEmail", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.Property<Guid>("PersonPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonPasswordId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPassword", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPhoto");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.Property<Guid>("PersonProfilePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonProfilePictureId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonProfilePicture", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.Property<Guid>("PersonSaltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfRounds")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonSaltId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonSalt", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.CoursePromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PromotionId");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePromotion");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.PromotionDuration", b =>
                {
                    b.Property<Guid>("DurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.HasKey("DurationId");

                    b.HasIndex("PromotionId")
                        .IsUnique();

                    b.ToTable("PromotionDuration");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.PromotionImages", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionImages");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.CommunicationType", b =>
                {
                    b.Property<int>("CommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationTypeId");

                    b.ToTable("CommunicationType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.EngagementMethod", b =>
                {
                    b.Property<int>("EngagementMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngagementMethodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EngagementMethodId");

                    b.ToTable("EngagementMethod", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.TutorTeachingStyleType", b =>
                {
                    b.Property<int>("TutorTeachingStyleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorTeachingStyleTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorTeachingStyleTypeId");

                    b.ToTable("TutorTeachingStyleType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingCartID");

                    b.HasIndex("StudentID");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingCartID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("CourseID");

                    b.HasIndex("ShoppingCartID");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.Wishlist", b =>
                {
                    b.Property<Guid>("WishlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WishlistID");

                    b.HasIndex("StudentID");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.WishlistItems", b =>
                {
                    b.Property<Guid>("WishtListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WishtListItemId");

                    b.HasIndex("CourseID");

                    b.HasIndex("WishListId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("PersonId");

                    b.ToTable("Student", "Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.Property<Guid>("StudentDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentAcademicInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAreaOfSpecialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentDetailsId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentDetails", "Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.Property<Guid>("TutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TutorRegistrationStatusId")
                        .HasColumnType("int");

                    b.HasKey("TutorId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TutorRegistrationStatusId");

                    b.ToTable("Tutor", "Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorRegistrationStatus", b =>
                {
                    b.Property<int>("TutorRegistrationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorRegistrationStatusId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSkippable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("TutorRegistrationStatusId");

                    b.ToTable("TutorRegistrationStatus", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorTeachingInformation", b =>
                {
                    b.Property<Guid>("TutorTeachingInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResponseTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryCommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryEngagementMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryCommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryEngagementMethodId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialConsiderations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeachingStyleTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("TutorTeachingInformationId");

                    b.HasIndex("PrimaryCommunicationTypeId");

                    b.HasIndex("PrimaryEngagementMethodId");

                    b.HasIndex("SecondaryCommunicationTypeId");

                    b.HasIndex("SecondaryEngagementMethodId");

                    b.HasIndex("TeachingStyleTypeId");

                    b.HasIndex("TutorId")
                        .IsUnique();

                    b.ToTable("TutorTeachingInformation", "Tutor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLog", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Entities.Course.CourseType", b =>
                {
                    b.Property<int>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseType", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Learning.LearningCategory", b =>
                {
                    b.Property<Guid>("LearningCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("LearningCategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearningCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LearningCategoryId");

                    b.ToTable("LearningCategory", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonAvailability", b =>
                {
                    b.Property<Guid>("PersonAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonAvailabilityId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAvailability", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonCareerInformation", b =>
                {
                    b.Property<Guid>("PersonCareerInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("IndustryClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("PersonCareerInformationId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("IndustryClassificationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("PersonCareerInformation", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonEducationInformation", b =>
                {
                    b.Property<Guid>("PersonEducationInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionOfficialWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("MinorFieldOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PersonEducationInformationId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEducationInformation", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonPhoneNumber", b =>
                {
                    b.Property<Guid>("PersonPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("NationalCallingCodeCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonPhoneNumberId");

                    b.HasIndex("NationalCallingCodeCountryId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonPhoneNumber", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonVerificationCode", b =>
                {
                    b.Property<Guid>("PersonVerificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpiryDateTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonVerificationCodeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonVerificationCode", "Person");
                });

            modelBuilder.Entity("backend.Entities.Reference.Country.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlagEmoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOAlpha2Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCallingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentTypeId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentType", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.IndustryClassification", b =>
                {
                    b.Property<Guid>("IndustryClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("IndustryClassificationId");

                    b.ToTable("IndustryClassification", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.Language.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRightToLeft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.Learning.LearningDifficultyLevel", b =>
                {
                    b.Property<int>("LearningDifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningDifficultyLevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningDifficultyLevelId");

                    b.ToTable("LearningDifficultyLevel", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.WorkType", b =>
                {
                    b.Property<int>("WorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTypeId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("WorkTypeId");

                    b.ToTable("WorkType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentActiveUser", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("ActiveUserPersonId");

                    b.HasOne("EduConnect.Entities.CollaborationDocument.Document", "Document")
                        .WithMany("CollaborationDocumentActiveUsers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentInvitation", b =>
                {
                    b.HasOne("EduConnect.Entities.CollaborationDocument.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.CollaborationDocument.Document", null)
                        .WithMany("CollaborationDocumentInvitations")
                        .HasForeignKey("DocumentId1");

                    b.HasOne("EduConnect.Entities.Person.Person", "InvitedByPerson")
                        .WithMany()
                        .HasForeignKey("InvitedByPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EduConnect.Entities.Person.Person", "InvitedPerson")
                        .WithMany()
                        .HasForeignKey("InvitedPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Document");

                    b.Navigation("InvitedByPerson");

                    b.Navigation("InvitedPerson");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.CollaborationDocumentParticipant", b =>
                {
                    b.HasOne("EduConnect.Entities.CollaborationDocument.CollaborationDocumentInvitation", "CollaborationDocumentInvitation")
                        .WithMany()
                        .HasForeignKey("CollaborationDocumentInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.CollaborationDocument.Document", "Document")
                        .WithMany("CollaborationDocumentParticipants")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "ParticipantPerson")
                        .WithMany()
                        .HasForeignKey("ParticipantPersonId");

                    b.Navigation("CollaborationDocumentInvitation");

                    b.Navigation("Document");

                    b.Navigation("ParticipantPerson");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.Document", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("CreatedByPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Course", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.CourseCategory", "CourseCategory")
                        .WithMany()
                        .HasForeignKey("CourseCategoryId")
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.Learning.LearningDifficultyLevel", "LearningDifficultyLevel")
                        .WithMany()
                        .HasForeignKey("LearningDifficultyLevelId")
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .IsRequired();

                    b.Navigation("CourseCategory");

                    b.Navigation("LearningDifficultyLevel");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithOne("CourseDetails")
                        .HasForeignKey("EduConnect.Entities.Course.CourseDetails", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Course.CourseType", "CourseType")
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.Learning.LearningDifficultyLevel", "LearningDifficultyLevel")
                        .WithMany()
                        .HasForeignKey("LearningDifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Learning.LearningSubcategory", "LearningSubcategory")
                        .WithMany()
                        .HasForeignKey("LearningSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseType");

                    b.Navigation("LearningDifficultyLevel");

                    b.Navigation("LearningSubcategory");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseEnrollment", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLanguage", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLesson", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLessonContent", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.CourseLesson", "CourseLesson")
                        .WithOne("CourseLessonContent")
                        .HasForeignKey("EduConnect.Entities.Course.CourseLessonContent", "CourseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLesson");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLessonResource", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.CourseLesson", "CourseLesson")
                        .WithMany()
                        .HasForeignKey("CourseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("CourseLesson");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CoursePromotionImage", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Course");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseTag", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Tag", null)
                        .WithMany("CourseTags")
                        .HasForeignKey("TagId1");

                    b.Navigation("Course");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseTeachingResource", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Course");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseThumbnail", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithOne("CourseThumbnail")
                        .HasForeignKey("EduConnect.Entities.Course.CourseThumbnail", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Course");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseViewershipData", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("ViewedByPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseViewershipDataSnapshot", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Folder", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "OwnerPerson")
                        .WithMany()
                        .HasForeignKey("OwnerPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Course.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId");

                    b.Navigation("OwnerPerson");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.StudentEnrollment", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Tag", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("CreatedByPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Learning.LearningSubcategory", b =>
                {
                    b.HasOne("backend.Entities.Learning.LearningCategory", "LearningCategory")
                        .WithMany()
                        .HasForeignKey("LearningCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningCategory");
                });

            modelBuilder.Entity("EduConnect.Entities.Messenger.Message", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.AuthenticationToken", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.HasOne("backend.Entities.Reference.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginCountryId");

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonDetails")
                        .HasForeignKey("EduConnect.Entities.Person.PersonDetails", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonEmail")
                        .HasForeignKey("EduConnect.Entities.Person.PersonEmail", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPhoto", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany("PersonPhoto")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonSalt")
                        .HasForeignKey("EduConnect.Entities.Person.PersonSalt", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.CoursePromotion", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.PromotionDuration", b =>
                {
                    b.HasOne("EduConnect.Entities.Promotion.CoursePromotion", "Promotion")
                        .WithOne("Duration")
                        .HasForeignKey("EduConnect.Entities.Promotion.PromotionDuration", "PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.PromotionImages", b =>
                {
                    b.HasOne("EduConnect.Entities.Promotion.CoursePromotion", "Promotion")
                        .WithMany("Images")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.ShoppingCart", b =>
                {
                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.ShoppingCartItem", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Shopping.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.Wishlist", b =>
                {
                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.WishlistItems", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Shopping.Wishlist", "WishList")
                        .WithMany("Items")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithOne("StudentDetails")
                        .HasForeignKey("EduConnect.Entities.Student.StudentDetails", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.TutorRegistrationStatus", "TutorRegistrationStatus")
                        .WithMany()
                        .HasForeignKey("TutorRegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TutorRegistrationStatus");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorTeachingInformation", b =>
                {
                    b.HasOne("EduConnect.Entities.Reference.CommunicationType", "PrimaryCommunicationType")
                        .WithMany()
                        .HasForeignKey("PrimaryCommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Reference.EngagementMethod", "PrimaryEngagementMethod")
                        .WithMany()
                        .HasForeignKey("PrimaryEngagementMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Reference.CommunicationType", "SecondaryCommunicationType")
                        .WithMany()
                        .HasForeignKey("SecondaryCommunicationTypeId");

                    b.HasOne("EduConnect.Entities.Reference.EngagementMethod", "SecondaryEngagementMethod")
                        .WithMany()
                        .HasForeignKey("SecondaryEngagementMethodId");

                    b.HasOne("EduConnect.Entities.Reference.TutorTeachingStyleType", "TeachingStyleType")
                        .WithMany()
                        .HasForeignKey("TeachingStyleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCommunicationType");

                    b.Navigation("PrimaryEngagementMethod");

                    b.Navigation("SecondaryCommunicationType");

                    b.Navigation("SecondaryEngagementMethod");

                    b.Navigation("TeachingStyleType");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("PersonId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.Person.PersonAvailability", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonCareerInformation", b =>
                {
                    b.HasOne("backend.Entities.Reference.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.IndustryClassification", "IndustryClassification")
                        .WithMany()
                        .HasForeignKey("IndustryClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("EmploymentType");

                    b.Navigation("IndustryClassification");

                    b.Navigation("Person");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonEducationInformation", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonPhoneNumber", b =>
                {
                    b.HasOne("backend.Entities.Reference.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("NationalCallingCodeCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonVerificationCode", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.CollaborationDocument.Document", b =>
                {
                    b.Navigation("CollaborationDocumentActiveUsers");

                    b.Navigation("CollaborationDocumentInvitations");

                    b.Navigation("CollaborationDocumentParticipants");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Course", b =>
                {
                    b.Navigation("CourseDetails")
                        .IsRequired();

                    b.Navigation("CourseThumbnail");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseLesson", b =>
                {
                    b.Navigation("CourseLessonContent");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Tag", b =>
                {
                    b.Navigation("CourseTags");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("PersonDetails")
                        .IsRequired();

                    b.Navigation("PersonEmail")
                        .IsRequired();

                    b.Navigation("PersonPhoto");

                    b.Navigation("PersonSalt")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EduConnect.Entities.Promotion.CoursePromotion", b =>
                {
                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("Images");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EduConnect.Entities.Shopping.Wishlist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Navigation("StudentDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
