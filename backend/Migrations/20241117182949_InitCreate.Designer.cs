// <auto-generated />
using System;
using EduConnect.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduConnect.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241117182949_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.Property<Guid>("PersonDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonDetailsId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonDetails");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.Property<Guid>("PersonEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonEmailId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonEmail");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.Property<Guid>("PersonPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PersonPasswordId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPassword");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.Property<Guid>("PersonProfilePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonProfilePictureId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonProfilePicture");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.Property<Guid>("PersonSaltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfRounds")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonSaltId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonSalt");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("PersonId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.Property<Guid>("StudentDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentAcademicInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAreaOfSpecialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentDetailsId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentDetails");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId");

                    b.ToTable("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorAvailability", b =>
                {
                    b.Property<Guid>("TutorAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorAvailabilityId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorAvailability");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorCertification", b =>
                {
                    b.Property<Guid>("TutorCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CertificateScan")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExpirationDate")
                        .HasColumnType("bigint");

                    b.Property<long>("IssueDate")
                        .HasColumnType("bigint");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorCertificationId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorCertification");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorDetails", b =>
                {
                    b.Property<Guid>("TutorDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("MainAreaOfSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortBiography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("TutorDetailsId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorDetails");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorRating", b =>
                {
                    b.Property<Guid>("TutorRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TutorRatingId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutorRating");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonDetails")
                        .HasForeignKey("EduConnect.Entities.Person.PersonDetails", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonEmail")
                        .HasForeignKey("EduConnect.Entities.Person.PersonEmail", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithOne("StudentDetails")
                        .HasForeignKey("EduConnect.Entities.Student.StudentDetails", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorAvailability", b =>
                {
                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorCertification", b =>
                {
                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorRating", b =>
                {
                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Navigation("PersonDetails")
                        .IsRequired();

                    b.Navigation("PersonEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Navigation("StudentDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
