// <auto-generated />
using System;
using EduConnect.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduConnect.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250114115527_AddCourseLessonAndComplementaryTables")]
    partial class AddCourseLessonAndComplementaryTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnect.Entities.Course.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseCreationCompletenessStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseCreationCompletenessStepId");

                    b.HasIndex("TutorId");

                    b.ToTable("Course", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseDetails", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("LearningDifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("LearningSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("LearningDifficultyLevelId");

                    b.HasIndex("LearningSubcategoryId");

                    b.ToTable("CourseDetails", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseMainMaterial", b =>
                {
                    b.Property<Guid>("CourseMainMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ContentSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("DateTimePointOfFileCreation")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseMainMaterialId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseMainMaterial", "Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Learning.LearningSubcategory", b =>
                {
                    b.Property<Guid>("LearningSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LearningCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LearningSubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LearningSubcategoryId");

                    b.HasIndex("LearningCategoryId");

                    b.ToTable("LearningSubcategory", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId");

                    b.ToTable("Person", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.Property<Guid>("PersonDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryOfOriginCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonDetailsId");

                    b.HasIndex("CountryOfOriginCountryId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonDetails", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.Property<Guid>("PersonEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonEmailId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonEmail", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.Property<Guid>("PersonPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PersonPasswordId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPassword", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.Property<Guid>("PersonProfilePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonProfilePictureId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonProfilePicture", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.Property<Guid>("PersonSaltId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfRounds")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonSaltId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonSalt", "Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.CommunicationType", b =>
                {
                    b.Property<int>("CommunicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicationTypeId");

                    b.ToTable("CommunicationType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.CourseCreationCompletenessStep", b =>
                {
                    b.Property<Guid>("CourseCreationCompletenessStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.HasKey("CourseCreationCompletenessStepId");

                    b.ToTable("CourseCreationCompletenessStep", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.EngagementMethod", b =>
                {
                    b.Property<int>("EngagementMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EngagementMethodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EngagementMethodId");

                    b.ToTable("EngagementMethod", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Reference.TutorTeachingStyleType", b =>
                {
                    b.Property<int>("TutorTeachingStyleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorTeachingStyleTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorTeachingStyleTypeId");

                    b.ToTable("TutorTeachingStyleType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("PersonId");

                    b.ToTable("Student", "Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.Property<Guid>("StudentDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentAcademicInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainAreaOfSpecialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentDetailsId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentDetails", "Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.Property<Guid>("TutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TutorRegistrationStatusId")
                        .HasColumnType("int");

                    b.HasKey("TutorId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TutorRegistrationStatusId");

                    b.ToTable("Tutor", "Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorRegistrationStatus", b =>
                {
                    b.Property<int>("TutorRegistrationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorRegistrationStatusId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSkippable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("TutorRegistrationStatusId");

                    b.ToTable("TutorRegistrationStatus", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorTeachingInformation", b =>
                {
                    b.Property<Guid>("TutorTeachingInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResponseTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimaryCommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryEngagementMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryCommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryEngagementMethodId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialConsiderations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeachingStyleTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("TutorTeachingInformationId");

                    b.HasIndex("PrimaryCommunicationTypeId");

                    b.HasIndex("PrimaryEngagementMethodId");

                    b.HasIndex("SecondaryCommunicationTypeId");

                    b.HasIndex("SecondaryEngagementMethodId");

                    b.HasIndex("TeachingStyleTypeId");

                    b.HasIndex("TutorId")
                        .IsUnique();

                    b.ToTable("TutorTeachingInformation", "Tutor");
                });

            modelBuilder.Entity("backend.Entities.Course.CourseLanguage", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CourseLanguage", "Course");
                });

            modelBuilder.Entity("backend.Entities.Course.CourseType", b =>
                {
                    b.Property<int>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseType", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Learning.LearningCategory", b =>
                {
                    b.Property<Guid>("LearningCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("LearningCategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearningCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LearningCategoryId");

                    b.ToTable("LearningCategory", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonAvailability", b =>
                {
                    b.Property<Guid>("PersonAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonAvailabilityId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAvailability", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonCareerInformation", b =>
                {
                    b.Property<Guid>("PersonCareerInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("IndustryClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("PersonCareerInformationId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("IndustryClassificationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("PersonCareerInformation", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonEducationInformation", b =>
                {
                    b.Property<Guid>("PersonEducationInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionOfficialWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("MinorFieldOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PersonEducationInformationId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEducationInformation", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonPhoneNumber", b =>
                {
                    b.Property<Guid>("PersonPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("NationalCallingCodeCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("PersonPhoneNumberId");

                    b.HasIndex("NationalCallingCodeCountryId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PersonPhoneNumber", "Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonVerificationCode", b =>
                {
                    b.Property<Guid>("PersonVerificationCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpiryDateTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonVerificationCodeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonVerificationCode", "Person");
                });

            modelBuilder.Entity("backend.Entities.Reference.Country.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlagEmoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISOAlpha2Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCallingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.EmploymentType", b =>
                {
                    b.Property<int>("EmploymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentTypeId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("EmploymentTypeId");

                    b.ToTable("EmploymentType", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.IndustryClassification", b =>
                {
                    b.Property<Guid>("IndustryClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("IndustryClassificationId");

                    b.ToTable("IndustryClassification", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.Language.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRightToLeft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.Learning.LearningDifficultyLevel", b =>
                {
                    b.Property<int>("LearningDifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningDifficultyLevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LearningDifficultyLevelId");

                    b.ToTable("LearningDifficultyLevel", "Reference");
                });

            modelBuilder.Entity("backend.Entities.Reference.WorkType", b =>
                {
                    b.Property<int>("WorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTypeId"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("WorkTypeId");

                    b.ToTable("WorkType", "Reference");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.Course", b =>
                {
                    b.HasOne("EduConnect.Entities.Reference.CourseCreationCompletenessStep", "CourseCreationCompletenessStep")
                        .WithMany()
                        .HasForeignKey("CourseCreationCompletenessStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCreationCompletenessStep");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Course.CourseType", "CourseType")
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.Learning.LearningDifficultyLevel", "LearningDifficultyLevel")
                        .WithMany()
                        .HasForeignKey("LearningDifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Learning.LearningSubcategory", "LearningSubcategory")
                        .WithMany()
                        .HasForeignKey("LearningSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseType");

                    b.Navigation("LearningDifficultyLevel");

                    b.Navigation("LearningSubcategory");
                });

            modelBuilder.Entity("EduConnect.Entities.Course.CourseMainMaterial", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduConnect.Entities.Learning.LearningSubcategory", b =>
                {
                    b.HasOne("backend.Entities.Learning.LearningCategory", "LearningCategory")
                        .WithMany()
                        .HasForeignKey("LearningCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningCategory");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonDetails", b =>
                {
                    b.HasOne("backend.Entities.Reference.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginCountryId");

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonDetails")
                        .HasForeignKey("EduConnect.Entities.Person.PersonDetails", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonEmail", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithOne("PersonEmail")
                        .HasForeignKey("EduConnect.Entities.Person.PersonEmail", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonPassword", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonProfilePicture", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.PersonSalt", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Student.StudentDetails", b =>
                {
                    b.HasOne("EduConnect.Entities.Student.Student", "Student")
                        .WithOne("StudentDetails")
                        .HasForeignKey("EduConnect.Entities.Student.StudentDetails", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.Tutor", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.TutorRegistrationStatus", "TutorRegistrationStatus")
                        .WithMany()
                        .HasForeignKey("TutorRegistrationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TutorRegistrationStatus");
                });

            modelBuilder.Entity("EduConnect.Entities.Tutor.TutorTeachingInformation", b =>
                {
                    b.HasOne("EduConnect.Entities.Reference.CommunicationType", "PrimaryCommunicationType")
                        .WithMany()
                        .HasForeignKey("PrimaryCommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Reference.EngagementMethod", "PrimaryEngagementMethod")
                        .WithMany()
                        .HasForeignKey("PrimaryEngagementMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Reference.CommunicationType", "SecondaryCommunicationType")
                        .WithMany()
                        .HasForeignKey("SecondaryCommunicationTypeId");

                    b.HasOne("EduConnect.Entities.Reference.EngagementMethod", "SecondaryEngagementMethod")
                        .WithMany()
                        .HasForeignKey("SecondaryEngagementMethodId");

                    b.HasOne("EduConnect.Entities.Reference.TutorTeachingStyleType", "TeachingStyleType")
                        .WithMany()
                        .HasForeignKey("TeachingStyleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Tutor.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryCommunicationType");

                    b.Navigation("PrimaryEngagementMethod");

                    b.Navigation("SecondaryCommunicationType");

                    b.Navigation("SecondaryEngagementMethod");

                    b.Navigation("TeachingStyleType");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("backend.Entities.Course.CourseLanguage", b =>
                {
                    b.HasOne("EduConnect.Entities.Course.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.Language.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonAvailability", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonCareerInformation", b =>
                {
                    b.HasOne("backend.Entities.Reference.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.IndustryClassification", "IndustryClassification")
                        .WithMany()
                        .HasForeignKey("IndustryClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.Reference.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("EmploymentType");

                    b.Navigation("IndustryClassification");

                    b.Navigation("Person");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonEducationInformation", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonPhoneNumber", b =>
                {
                    b.HasOne("backend.Entities.Reference.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("NationalCallingCodeCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("backend.Entities.Person.PersonVerificationCode", b =>
                {
                    b.HasOne("EduConnect.Entities.Person.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EduConnect.Entities.Person.Person", b =>
                {
                    b.Navigation("PersonDetails")
                        .IsRequired();

                    b.Navigation("PersonEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("EduConnect.Entities.Student.Student", b =>
                {
                    b.Navigation("StudentDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
